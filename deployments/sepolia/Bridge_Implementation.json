{
  "address": "0x5F91e7e8A0BeE46aD3d724318927952D496c96c6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransactionProcessed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridgeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_bridgeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "processTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValidators",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51ee224f3bd74bdec3a081ead9755c96f70adb64483d21e5a9c5b1575ea3e886",
  "receipt": {
    "to": null,
    "from": "0x553c89ae42e700c5f66AfCcfDe84546349C6caE8",
    "contractAddress": "0x5F91e7e8A0BeE46aD3d724318927952D496c96c6",
    "transactionIndex": 0,
    "gasUsed": "1911893",
    "logsBloom": "0x
    "blockHash": "0x17d3397ed7f790637ee39b5080fac901a8afddba8c2eaf86b877089c34955d82",
    "transactionHash": "0x51ee224f3bd74bdec3a081ead9755c96f70adb64483d21e5a9c5b1575ea3e886",
    "logs": [],
    "blockNumber": 2395086,
    "cumulativeGasUsed": "1911893",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "43e7a4022bbc614ab111d01f4fe52188",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransactionProcessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_bridgeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"processTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidators\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"totalValidators()\":{\"notice\":\"This variable store the total validators in the sidechain\"},\"validators(address)\":{\"notice\":\"This mapping tells us if an sidechain account is a validator or not\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable {\\n    IERC20 public bridgeToken;\\n\\n    /// @notice This mapping stores the nextNonce of an sidechain account\\n    mapping (address => uint256) nextNonce;\\n\\n    /// @notice This variable store the total validators in the sidechain\\n    uint8 public totalValidators;\\n    \\n    /// @notice This mapping tells us if an sidechain account is a validator or not\\n    mapping(address => bool) public validators;\\n\\n    /// @notice Tracks which validator has signed the transaction\\n    mapping (address => mapping(uint => mapping(address => bool))) validatorSigned;\\n    \\n    event Deposited (\\n        address user,\\n        uint256 amount,\\n        address account\\n    );\\n\\n    event TransactionProcessed (\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount\\n    );\\n\\n    enum TransactionType {\\n      ADD_VALIDATOR,\\n      REMOVE_VALIDATOR,\\n      WITHDRAW  \\n    }\\n\\n    function initialize(IERC20 _bridgeToken, address validator) public initializer {\\n        bridgeToken = _bridgeToken;\\n        totalValidators = 1;\\n        validators[validator] = true;\\n\\n        __Ownable_init();\\n    }\\n\\n    function deposit(\\n        uint256 amount, address account\\n    ) external {\\n        bridgeToken.transferFrom(msg.sender, address(this), amount);\\n        emit Deposited(msg.sender, amount, account);\\n    }\\n\\n    function getMessageHash(\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, nonce, txnType, amount, getChainID()));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n            );\\n    }\\n\\n     function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function processTransaction(\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount,\\n        bytes[] memory signatures\\n    ) external {\\n        require(signatures.length >= (totalValidators / 2) + 1, \\\"more than half of validators need to sign\\\");\\n        require(nonce >= nextNonce[account], \\\"invalid nonce\\\");\\n\\n        uint totalSigned; \\n\\n        for(uint i = 0; i < signatures.length; i++) {\\n            bytes32 messageHash = getMessageHash(account, nonce, txnType, amount);\\n            bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n            address signer = recoverSigner(ethSignedMessageHash, signatures[i]);\\n\\n            if (validatorSigned[account][nonce][signer] == false && validators[signer] == true) {\\n                totalSigned++;\\n                validatorSigned[account][nonce][signer] = true;\\n            }\\n        }\\n\\n        require(totalSigned >= (totalValidators / 2) + 1, \\\"insufficient validators signed\\\");\\n        nextNonce[account] = nonce + 1;\\n\\n        if (txnType == TransactionType.ADD_VALIDATOR) {\\n            totalValidators++;\\n            validators[account] = true;\\n        } else if (txnType == TransactionType.REMOVE_VALIDATOR) {\\n            totalValidators--;\\n            validators[account] = false;\\n        } else if (txnType == TransactionType.WITHDRAW) {\\n            bridgeToken.transfer(account, amount);\\n        }\\n\\n        emit TransactionProcessed(account, nonce, txnType, amount);\\n    }\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\",\"keccak256\":\"0xd7a03f6dff42a5aecaff0cdc904885ba04fde5fa48501c0d0771dd59c1e0e08d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a7bb58031161008c578063f2fde38b11610066578063f2fde38b14610200578063f4734b0c1461021c578063fa52c7d81461023a578063fa5408011461026a576100cf565b8063a7bb580314610194578063abf8cfd6146101c6578063c81b356b146101e2576100cf565b8063225cab95146100d4578063485cc955146101045780636e553f6514610120578063715018a61461013c5780638da5cb5b1461014657806397aba7f914610164575b600080fd5b6100ee60048036038101906100e9919061113f565b61029a565b6040516100fb91906111bf565b60405180910390f35b61011e60048036038101906101199190611218565b6102dc565b005b61013a60048036038101906101359190611258565b6104d1565b005b6101446105b3565b005b61014e6105c7565b60405161015b91906112a7565b60405180910390f35b61017e60048036038101906101799190611434565b6105f1565b60405161018b91906112a7565b60405180910390f35b6101ae60048036038101906101a99190611490565b610660565b6040516101bd939291906114f5565b60405180910390f35b6101e060048036038101906101db9190611612565b6106c8565b005b6101ea610d30565b6040516101f791906116a9565b60405180910390f35b61021a600480360381019061021591906116c4565b610d43565b005b610224610dc6565b6040516102319190611750565b60405180910390f35b610254600480360381019061024f91906116c4565b610dec565b6040516102619190611786565b60405180910390f35b610284600480360381019061027f91906117a1565b610e0c565b60405161029191906111bf565b60405180910390f35b6000848484846102a8610e3c565b6040516020016102bc9594939291906118d5565b604051602081830303815290604052805190602001209050949350505050565b60008060019054906101000a900460ff1615905080801561030d5750600160008054906101000a900460ff1660ff16105b8061033a575061031c30610e49565b1580156103395750600160008054906101000a900460ff1660ff16145b5b610379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610370906119b7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156103b6576001600060016101000a81548160ff0219169083151502179055505b82606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606760006101000a81548160ff021916908360ff1602179055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610473610e6c565b80156104cc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104c39190611a12565b60405180910390a15b505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161053093929190611a3c565b6020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190611a9f565b507fb4e1304f97b5093610f51b33ddab6622388422e2dac138b0d32f93dcfbd39edf3383836040516105a793929190611acc565b60405180910390a15050565b6105bb610ec5565b6105c56000610f43565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008061060085610660565b925092509250600186828585604051600081526020016040526040516106299493929190611b03565b6020604051602081039080840390855afa15801561064b573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600060418451146106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090611b94565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b60016002606760009054906101000a900460ff166106e69190611c12565b6106f09190611c43565b60ff1681511015610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90611cea565b60405180910390fd5b606660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548410156107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af90611d56565b60405180910390fd5b600080600090505b82518110156109dc5760006107d78888888861029a565b905060006107e482610e0c565b9050600061080c828786815181106107ff576107fe611d76565b5b60200260200101516105f1565b905060001515606960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514801561090c575060011515606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156109c657848061091c90611da5565b9550506001606960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505080806109d490611da5565b9150506107c0565b5060016002606760009054906101000a900460ff166109fb9190611c12565b610a059190611c43565b60ff16811015610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190611e39565b60405180910390fd5b600185610a579190611e59565b606660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002811115610aae57610aad611837565b5b846002811115610ac157610ac0611837565b5b03610b5b576067600081819054906101000a900460ff1680929190610ae590611e8d565b91906101000a81548160ff021916908360ff160217905550506001606860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ceb565b60016002811115610b6f57610b6e611837565b5b846002811115610b8257610b81611837565b5b03610c1c576067600081819054906101000a900460ff1680929190610ba690611eb6565b91906101000a81548160ff021916908360ff160217905550506000606860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610cea565b600280811115610c2f57610c2e611837565b5b846002811115610c4257610c41611837565b5b03610ce957606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87856040518363ffffffff1660e01b8152600401610ca4929190611edf565b6020604051808303816000875af1158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190611a9f565b505b5b5b7f4552d150390a3f9719b57b97499667cf7fe2639cd298473b2a5ac471c565e03486868686604051610d209493929190611f17565b60405180910390a1505050505050565b606760009054906101000a900460ff1681565b610d4b610ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db190611fce565b60405180910390fd5b610dc381610f43565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60686020528060005260406000206000915054906101000a900460ff1681565b600081604051602001610e1f9190612066565b604051602081830303815290604052805190602001209050919050565b6000804690508091505090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb2906120fe565b60405180910390fd5b610ec3611009565b565b610ecd61106a565b73ffffffffffffffffffffffffffffffffffffffff16610eeb6105c7565b73ffffffffffffffffffffffffffffffffffffffff1614610f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f389061216a565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906120fe565b60405180910390fd5b61106861106361106a565b610f43565b565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110b182611086565b9050919050565b6110c1816110a6565b81146110cc57600080fd5b50565b6000813590506110de816110b8565b92915050565b6000819050919050565b6110f7816110e4565b811461110257600080fd5b50565b600081359050611114816110ee565b92915050565b6003811061112757600080fd5b50565b6000813590506111398161111a565b92915050565b600080600080608085870312156111595761115861107c565b5b6000611167878288016110cf565b945050602061117887828801611105565b93505060406111898782880161112a565b925050606061119a87828801611105565b91505092959194509250565b6000819050919050565b6111b9816111a6565b82525050565b60006020820190506111d460008301846111b0565b92915050565b60006111e5826110a6565b9050919050565b6111f5816111da565b811461120057600080fd5b50565b600081359050611212816111ec565b92915050565b6000806040838503121561122f5761122e61107c565b5b600061123d85828601611203565b925050602061124e858286016110cf565b9150509250929050565b6000806040838503121561126f5761126e61107c565b5b600061127d85828601611105565b925050602061128e858286016110cf565b9150509250929050565b6112a1816110a6565b82525050565b60006020820190506112bc6000830184611298565b92915050565b6112cb816111a6565b81146112d657600080fd5b50565b6000813590506112e8816112c2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611341826112f8565b810181811067ffffffffffffffff821117156113605761135f611309565b5b80604052505050565b6000611373611072565b905061137f8282611338565b919050565b600067ffffffffffffffff82111561139f5761139e611309565b5b6113a8826112f8565b9050602081019050919050565b82818337600083830152505050565b60006113d76113d284611384565b611369565b9050828152602081018484840111156113f3576113f26112f3565b5b6113fe8482856113b5565b509392505050565b600082601f83011261141b5761141a6112ee565b5b813561142b8482602086016113c4565b91505092915050565b6000806040838503121561144b5761144a61107c565b5b6000611459858286016112d9565b925050602083013567ffffffffffffffff81111561147a57611479611081565b5b61148685828601611406565b9150509250929050565b6000602082840312156114a6576114a561107c565b5b600082013567ffffffffffffffff8111156114c4576114c3611081565b5b6114d084828501611406565b91505092915050565b600060ff82169050919050565b6114ef816114d9565b82525050565b600060608201905061150a60008301866111b0565b61151760208301856111b0565b61152460408301846114e6565b949350505050565b600067ffffffffffffffff82111561154757611546611309565b5b602082029050602081019050919050565b600080fd5b600061157061156b8461152c565b611369565b9050808382526020820190506020840283018581111561159357611592611558565b5b835b818110156115da57803567ffffffffffffffff8111156115b8576115b76112ee565b5b8086016115c58982611406565b85526020850194505050602081019050611595565b5050509392505050565b600082601f8301126115f9576115f86112ee565b5b813561160984826020860161155d565b91505092915050565b600080600080600060a0868803121561162e5761162d61107c565b5b600061163c888289016110cf565b955050602061164d88828901611105565b945050604061165e8882890161112a565b935050606061166f88828901611105565b925050608086013567ffffffffffffffff8111156116905761168f611081565b5b61169c888289016115e4565b9150509295509295909350565b60006020820190506116be60008301846114e6565b92915050565b6000602082840312156116da576116d961107c565b5b60006116e8848285016110cf565b91505092915050565b6000819050919050565b600061171661171161170c84611086565b6116f1565b611086565b9050919050565b6000611728826116fb565b9050919050565b600061173a8261171d565b9050919050565b61174a8161172f565b82525050565b60006020820190506117656000830184611741565b92915050565b60008115159050919050565b6117808161176b565b82525050565b600060208201905061179b6000830184611777565b92915050565b6000602082840312156117b7576117b661107c565b5b60006117c5848285016112d9565b91505092915050565b60008160601b9050919050565b60006117e6826117ce565b9050919050565b60006117f8826117db565b9050919050565b61181061180b826110a6565b6117ed565b82525050565b6000819050919050565b61183161182c826110e4565b611816565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061187757611876611837565b5b50565b600081905061188882611866565b919050565b60006118988261187a565b9050919050565b60008160f81b9050919050565b60006118b78261189f565b9050919050565b6118cf6118ca8261188d565b6118ac565b82525050565b60006118e182886117ff565b6014820191506118f18287611820565b60208201915061190182866118be565b6001820191506119118285611820565b6020820191506119218284611820565b6020820191508190509695505050505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006119a1602e83611934565b91506119ac82611945565b604082019050919050565b600060208201905081810360008301526119d081611994565b9050919050565b6000819050919050565b60006119fc6119f76119f2846119d7565b6116f1565b6114d9565b9050919050565b611a0c816119e1565b82525050565b6000602082019050611a276000830184611a03565b92915050565b611a36816110e4565b82525050565b6000606082019050611a516000830186611298565b611a5e6020830185611298565b611a6b6040830184611a2d565b949350505050565b611a7c8161176b565b8114611a8757600080fd5b50565b600081519050611a9981611a73565b92915050565b600060208284031215611ab557611ab461107c565b5b6000611ac384828501611a8a565b91505092915050565b6000606082019050611ae16000830186611298565b611aee6020830185611a2d565b611afb6040830184611298565b949350505050565b6000608082019050611b1860008301876111b0565b611b2560208301866114e6565b611b3260408301856111b0565b611b3f60608301846111b0565b95945050505050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000611b7e601883611934565b9150611b8982611b48565b602082019050919050565b60006020820190508181036000830152611bad81611b71565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c1d826114d9565b9150611c28836114d9565b925082611c3857611c37611bb4565b5b828204905092915050565b6000611c4e826114d9565b9150611c59836114d9565b9250828201905060ff811115611c7257611c71611be3565b5b92915050565b7f6d6f7265207468616e2068616c66206f662076616c696461746f7273206e656560008201527f6420746f207369676e0000000000000000000000000000000000000000000000602082015250565b6000611cd4602983611934565b9150611cdf82611c78565b604082019050919050565b60006020820190508181036000830152611d0381611cc7565b9050919050565b7f696e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b6000611d40600d83611934565b9150611d4b82611d0a565b602082019050919050565b60006020820190508181036000830152611d6f81611d33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611db0826110e4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611de257611de1611be3565b5b600182019050919050565b7f696e73756666696369656e742076616c696461746f7273207369676e65640000600082015250565b6000611e23601e83611934565b9150611e2e82611ded565b602082019050919050565b60006020820190508181036000830152611e5281611e16565b9050919050565b6000611e64826110e4565b9150611e6f836110e4565b9250828201905080821115611e8757611e86611be3565b5b92915050565b6000611e98826114d9565b915060ff8203611eab57611eaa611be3565b5b600182019050919050565b6000611ec1826114d9565b915060008203611ed457611ed3611be3565b5b600182039050919050565b6000604082019050611ef46000830185611298565b611f016020830184611a2d565b9392505050565b611f118161188d565b82525050565b6000608082019050611f2c6000830187611298565b611f396020830186611a2d565b611f466040830185611f08565b611f536060830184611a2d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611fb8602683611934565b9150611fc382611f5c565b604082019050919050565b60006020820190508181036000830152611fe781611fab565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061202f601c83611fee565b915061203a82611ff9565b601c82019050919050565b6000819050919050565b61206061205b826111a6565b612045565b82525050565b600061207182612022565b915061207d828461204f565b60208201915081905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006120e8602b83611934565b91506120f38261208c565b604082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612154602083611934565b915061215f8261211e565b602082019050919050565b6000602082019050818103600083015261218381612147565b905091905056fea2646970667358221220ee09eae049724e96003c096c317682ab02154ef284cd891746ee9f192def47f864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a7bb58031161008c578063f2fde38b11610066578063f2fde38b14610200578063f4734b0c1461021c578063fa52c7d81461023a578063fa5408011461026a576100cf565b8063a7bb580314610194578063abf8cfd6146101c6578063c81b356b146101e2576100cf565b8063225cab95146100d4578063485cc955146101045780636e553f6514610120578063715018a61461013c5780638da5cb5b1461014657806397aba7f914610164575b600080fd5b6100ee60048036038101906100e9919061113f565b61029a565b6040516100fb91906111bf565b60405180910390f35b61011e60048036038101906101199190611218565b6102dc565b005b61013a60048036038101906101359190611258565b6104d1565b005b6101446105b3565b005b61014e6105c7565b60405161015b91906112a7565b60405180910390f35b61017e60048036038101906101799190611434565b6105f1565b60405161018b91906112a7565b60405180910390f35b6101ae60048036038101906101a99190611490565b610660565b6040516101bd939291906114f5565b60405180910390f35b6101e060048036038101906101db9190611612565b6106c8565b005b6101ea610d30565b6040516101f791906116a9565b60405180910390f35b61021a600480360381019061021591906116c4565b610d43565b005b610224610dc6565b6040516102319190611750565b60405180910390f35b610254600480360381019061024f91906116c4565b610dec565b6040516102619190611786565b60405180910390f35b610284600480360381019061027f91906117a1565b610e0c565b60405161029191906111bf565b60405180910390f35b6000848484846102a8610e3c565b6040516020016102bc9594939291906118d5565b604051602081830303815290604052805190602001209050949350505050565b60008060019054906101000a900460ff1615905080801561030d5750600160008054906101000a900460ff1660ff16105b8061033a575061031c30610e49565b1580156103395750600160008054906101000a900460ff1660ff16145b5b610379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610370906119b7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156103b6576001600060016101000a81548160ff0219169083151502179055505b82606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606760006101000a81548160ff021916908360ff1602179055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610473610e6c565b80156104cc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104c39190611a12565b60405180910390a15b505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161053093929190611a3c565b6020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190611a9f565b507fb4e1304f97b5093610f51b33ddab6622388422e2dac138b0d32f93dcfbd39edf3383836040516105a793929190611acc565b60405180910390a15050565b6105bb610ec5565b6105c56000610f43565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008061060085610660565b925092509250600186828585604051600081526020016040526040516106299493929190611b03565b6020604051602081039080840390855afa15801561064b573d6000803e3d6000fd5b50505060206040510351935050505092915050565b600080600060418451146106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090611b94565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b60016002606760009054906101000a900460ff166106e69190611c12565b6106f09190611c43565b60ff1681511015610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90611cea565b60405180910390fd5b606660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548410156107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af90611d56565b60405180910390fd5b600080600090505b82518110156109dc5760006107d78888888861029a565b905060006107e482610e0c565b9050600061080c828786815181106107ff576107fe611d76565b5b60200260200101516105f1565b905060001515606960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514801561090c575060011515606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156109c657848061091c90611da5565b9550506001606960008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505080806109d490611da5565b9150506107c0565b5060016002606760009054906101000a900460ff166109fb9190611c12565b610a059190611c43565b60ff16811015610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190611e39565b60405180910390fd5b600185610a579190611e59565b606660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002811115610aae57610aad611837565b5b846002811115610ac157610ac0611837565b5b03610b5b576067600081819054906101000a900460ff1680929190610ae590611e8d565b91906101000a81548160ff021916908360ff160217905550506001606860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ceb565b60016002811115610b6f57610b6e611837565b5b846002811115610b8257610b81611837565b5b03610c1c576067600081819054906101000a900460ff1680929190610ba690611eb6565b91906101000a81548160ff021916908360ff160217905550506000606860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610cea565b600280811115610c2f57610c2e611837565b5b846002811115610c4257610c41611837565b5b03610ce957606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87856040518363ffffffff1660e01b8152600401610ca4929190611edf565b6020604051808303816000875af1158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190611a9f565b505b5b5b7f4552d150390a3f9719b57b97499667cf7fe2639cd298473b2a5ac471c565e03486868686604051610d209493929190611f17565b60405180910390a1505050505050565b606760009054906101000a900460ff1681565b610d4b610ec5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db190611fce565b60405180910390fd5b610dc381610f43565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60686020528060005260406000206000915054906101000a900460ff1681565b600081604051602001610e1f9190612066565b604051602081830303815290604052805190602001209050919050565b6000804690508091505090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb2906120fe565b60405180910390fd5b610ec3611009565b565b610ecd61106a565b73ffffffffffffffffffffffffffffffffffffffff16610eeb6105c7565b73ffffffffffffffffffffffffffffffffffffffff1614610f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f389061216a565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff16611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906120fe565b60405180910390fd5b61106861106361106a565b610f43565b565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110b182611086565b9050919050565b6110c1816110a6565b81146110cc57600080fd5b50565b6000813590506110de816110b8565b92915050565b6000819050919050565b6110f7816110e4565b811461110257600080fd5b50565b600081359050611114816110ee565b92915050565b6003811061112757600080fd5b50565b6000813590506111398161111a565b92915050565b600080600080608085870312156111595761115861107c565b5b6000611167878288016110cf565b945050602061117887828801611105565b93505060406111898782880161112a565b925050606061119a87828801611105565b91505092959194509250565b6000819050919050565b6111b9816111a6565b82525050565b60006020820190506111d460008301846111b0565b92915050565b60006111e5826110a6565b9050919050565b6111f5816111da565b811461120057600080fd5b50565b600081359050611212816111ec565b92915050565b6000806040838503121561122f5761122e61107c565b5b600061123d85828601611203565b925050602061124e858286016110cf565b9150509250929050565b6000806040838503121561126f5761126e61107c565b5b600061127d85828601611105565b925050602061128e858286016110cf565b9150509250929050565b6112a1816110a6565b82525050565b60006020820190506112bc6000830184611298565b92915050565b6112cb816111a6565b81146112d657600080fd5b50565b6000813590506112e8816112c2565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611341826112f8565b810181811067ffffffffffffffff821117156113605761135f611309565b5b80604052505050565b6000611373611072565b905061137f8282611338565b919050565b600067ffffffffffffffff82111561139f5761139e611309565b5b6113a8826112f8565b9050602081019050919050565b82818337600083830152505050565b60006113d76113d284611384565b611369565b9050828152602081018484840111156113f3576113f26112f3565b5b6113fe8482856113b5565b509392505050565b600082601f83011261141b5761141a6112ee565b5b813561142b8482602086016113c4565b91505092915050565b6000806040838503121561144b5761144a61107c565b5b6000611459858286016112d9565b925050602083013567ffffffffffffffff81111561147a57611479611081565b5b61148685828601611406565b9150509250929050565b6000602082840312156114a6576114a561107c565b5b600082013567ffffffffffffffff8111156114c4576114c3611081565b5b6114d084828501611406565b91505092915050565b600060ff82169050919050565b6114ef816114d9565b82525050565b600060608201905061150a60008301866111b0565b61151760208301856111b0565b61152460408301846114e6565b949350505050565b600067ffffffffffffffff82111561154757611546611309565b5b602082029050602081019050919050565b600080fd5b600061157061156b8461152c565b611369565b9050808382526020820190506020840283018581111561159357611592611558565b5b835b818110156115da57803567ffffffffffffffff8111156115b8576115b76112ee565b5b8086016115c58982611406565b85526020850194505050602081019050611595565b5050509392505050565b600082601f8301126115f9576115f86112ee565b5b813561160984826020860161155d565b91505092915050565b600080600080600060a0868803121561162e5761162d61107c565b5b600061163c888289016110cf565b955050602061164d88828901611105565b945050604061165e8882890161112a565b935050606061166f88828901611105565b925050608086013567ffffffffffffffff8111156116905761168f611081565b5b61169c888289016115e4565b9150509295509295909350565b60006020820190506116be60008301846114e6565b92915050565b6000602082840312156116da576116d961107c565b5b60006116e8848285016110cf565b91505092915050565b6000819050919050565b600061171661171161170c84611086565b6116f1565b611086565b9050919050565b6000611728826116fb565b9050919050565b600061173a8261171d565b9050919050565b61174a8161172f565b82525050565b60006020820190506117656000830184611741565b92915050565b60008115159050919050565b6117808161176b565b82525050565b600060208201905061179b6000830184611777565b92915050565b6000602082840312156117b7576117b661107c565b5b60006117c5848285016112d9565b91505092915050565b60008160601b9050919050565b60006117e6826117ce565b9050919050565b60006117f8826117db565b9050919050565b61181061180b826110a6565b6117ed565b82525050565b6000819050919050565b61183161182c826110e4565b611816565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061187757611876611837565b5b50565b600081905061188882611866565b919050565b60006118988261187a565b9050919050565b60008160f81b9050919050565b60006118b78261189f565b9050919050565b6118cf6118ca8261188d565b6118ac565b82525050565b60006118e182886117ff565b6014820191506118f18287611820565b60208201915061190182866118be565b6001820191506119118285611820565b6020820191506119218284611820565b6020820191508190509695505050505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006119a1602e83611934565b91506119ac82611945565b604082019050919050565b600060208201905081810360008301526119d081611994565b9050919050565b6000819050919050565b60006119fc6119f76119f2846119d7565b6116f1565b6114d9565b9050919050565b611a0c816119e1565b82525050565b6000602082019050611a276000830184611a03565b92915050565b611a36816110e4565b82525050565b6000606082019050611a516000830186611298565b611a5e6020830185611298565b611a6b6040830184611a2d565b949350505050565b611a7c8161176b565b8114611a8757600080fd5b50565b600081519050611a9981611a73565b92915050565b600060208284031215611ab557611ab461107c565b5b6000611ac384828501611a8a565b91505092915050565b6000606082019050611ae16000830186611298565b611aee6020830185611a2d565b611afb6040830184611298565b949350505050565b6000608082019050611b1860008301876111b0565b611b2560208301866114e6565b611b3260408301856111b0565b611b3f60608301846111b0565b95945050505050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000611b7e601883611934565b9150611b8982611b48565b602082019050919050565b60006020820190508181036000830152611bad81611b71565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c1d826114d9565b9150611c28836114d9565b925082611c3857611c37611bb4565b5b828204905092915050565b6000611c4e826114d9565b9150611c59836114d9565b9250828201905060ff811115611c7257611c71611be3565b5b92915050565b7f6d6f7265207468616e2068616c66206f662076616c696461746f7273206e656560008201527f6420746f207369676e0000000000000000000000000000000000000000000000602082015250565b6000611cd4602983611934565b9150611cdf82611c78565b604082019050919050565b60006020820190508181036000830152611d0381611cc7565b9050919050565b7f696e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b6000611d40600d83611934565b9150611d4b82611d0a565b602082019050919050565b60006020820190508181036000830152611d6f81611d33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611db0826110e4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611de257611de1611be3565b5b600182019050919050565b7f696e73756666696369656e742076616c696461746f7273207369676e65640000600082015250565b6000611e23601e83611934565b9150611e2e82611ded565b602082019050919050565b60006020820190508181036000830152611e5281611e16565b9050919050565b6000611e64826110e4565b9150611e6f836110e4565b9250828201905080821115611e8757611e86611be3565b5b92915050565b6000611e98826114d9565b915060ff8203611eab57611eaa611be3565b5b600182019050919050565b6000611ec1826114d9565b915060008203611ed457611ed3611be3565b5b600182039050919050565b6000604082019050611ef46000830185611298565b611f016020830184611a2d565b9392505050565b611f118161188d565b82525050565b6000608082019050611f2c6000830187611298565b611f396020830186611a2d565b611f466040830185611f08565b611f536060830184611a2d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611fb8602683611934565b9150611fc382611f5c565b604082019050919050565b60006020820190508181036000830152611fe781611fab565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061202f601c83611fee565b915061203a82611ff9565b601c82019050919050565b6000819050919050565b61206061205b826111a6565b612045565b82525050565b600061207182612022565b915061207d828461204f565b60208201915081905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006120e8602b83611934565b91506120f38261208c565b604082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612154602083611934565b915061215f8261211e565b602082019050919050565b6000602082019050818103600083015261218381612147565b905091905056fea2646970667358221220ee09eae049724e96003c096c317682ab02154ef284cd891746ee9f192def47f864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "totalValidators()": {
        "notice": "This variable store the total validators in the sidechain"
      },
      "validators(address)": {
        "notice": "This mapping tells us if an sidechain account is a validator or not"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 713,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "bridgeToken",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20)704"
      },
      {
        "astId": 718,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "nextNonce",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 721,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "totalValidators",
        "offset": 0,
        "slot": "103",
        "type": "t_uint8"
      },
      {
        "astId": 726,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "validators",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 735,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "validatorSigned",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)704": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}