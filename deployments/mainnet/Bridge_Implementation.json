{
  "address": "0x479a27564332a46C2725E7bb45e82FA5bE332e1C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TransactionProcessed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPIC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_EPIC",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "enum Bridge.TransactionType",
          "name": "txnType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "processTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValidators",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bfdb5bed6d96590959ad9e70f4ee29f918f06043ea0d95941c62418f04601eb",
  "receipt": {
    "to": null,
    "from": "0x52f195eF77E1e3615c42e8E8839ffF1cc4B10DC3",
    "contractAddress": "0x479a27564332a46C2725E7bb45e82FA5bE332e1C",
    "transactionIndex": 161,
    "gasUsed": "2115076",
    "logsBloom": "0x
    "blockHash": "0xa92a59e28c2a48e887f0c83572fcce166b2f773542f2df4050adb75696538cf0",
    "transactionHash": "0x2bfdb5bed6d96590959ad9e70f4ee29f918f06043ea0d95941c62418f04601eb",
    "logs": [],
    "blockNumber": 18028753,
    "cumulativeGasUsed": "29674652",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5dc4c12124ee610cf42d99a09128e3c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TransactionProcessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPIC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_EPIC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"enum Bridge.TransactionType\",\"name\":\"txnType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"processTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValidators\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositId()\":{\"notice\":\"unique ID assigned to each deposit\"},\"totalValidators()\":{\"notice\":\"This variable store the total validators in the sidechain\"},\"validators(address)\":{\"notice\":\"This mapping tells us if an sidechain account is a validator or not\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Bridge is OwnableUpgradeable {\\n    IERC20 public EPIC;\\n    IERC20 public USDC;\\n\\n    /// @notice This mapping tracks if a nonce is used in sidechain for an account\\n    mapping (address => mapping (uint256 => bool)) isNonceProcessed;\\n\\n    /// @notice This variable store the total validators in the sidechain\\n    uint8 public totalValidators;\\n    \\n    /// @notice This mapping tells us if an sidechain account is a validator or not\\n    mapping(address => bool) public validators;\\n\\n    /// @notice Tracks which validator has signed the transaction\\n    mapping (address => mapping(uint => mapping(address => bool))) validatorSigned;\\n\\n    /// @notice unique ID assigned to each deposit\\n    uint256 public depositId;\\n    \\n    event Deposited (\\n        IERC20 token,\\n        address user,\\n        uint256 amount,\\n        address account,\\n        uint256 depositId\\n    );\\n\\n    event TransactionProcessed (\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount,\\n        IERC20 token\\n    );\\n\\n    enum TransactionType {\\n      ADD_VALIDATOR,\\n      REMOVE_VALIDATOR,\\n      WITHDRAW  \\n    }\\n\\n    function initialize(IERC20 _EPIC, IERC20 _USDC, address validator) public initializer {\\n        EPIC = _EPIC;\\n        USDC = _USDC;\\n        totalValidators = 1;\\n        validators[validator] = true;\\n\\n        __Ownable_init();\\n    }\\n\\n    function deposit(\\n        IERC20 token, uint256 amount, address account\\n    ) external {\\n        require(\\n            address(token) == address(EPIC) ||\\n            address(token) == address(USDC),\\n            \\\"token not supported\\\"\\n        );\\n\\n        token.transferFrom(msg.sender, address(this), amount);\\n        emit Deposited(token, msg.sender, amount, account, depositId);\\n        depositId++;\\n    }\\n\\n    function getMessageHash(\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount,\\n        IERC20 token\\n    ) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, nonce, txnType, amount, token, getChainID()));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n            );\\n    }\\n\\n     function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function processTransaction(\\n        address account,\\n        uint nonce,\\n        TransactionType txnType,\\n        uint amount,\\n        IERC20 token,\\n        bytes[] memory signatures\\n    ) external {\\n        require(signatures.length >= (totalValidators / 2) + 1, \\\"more than half of validators need to sign\\\");\\n        require(isNonceProcessed[account][nonce] == false, \\\"invalid nonce\\\");\\n\\n        uint totalSigned; \\n\\n        for(uint i = 0; i < signatures.length; i++) {\\n            bytes32 messageHash = getMessageHash(account, nonce, txnType, amount, token);\\n            bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n            address signer = recoverSigner(ethSignedMessageHash, signatures[i]);\\n\\n            if (validatorSigned[account][nonce][signer] == false && validators[signer] == true) {\\n                totalSigned++;\\n                validatorSigned[account][nonce][signer] = true;\\n            }\\n        }\\n\\n        require(totalSigned >= (totalValidators / 2) + 1, \\\"insufficient validators signed\\\");\\n       isNonceProcessed[account][nonce] = true;\\n\\n        if (txnType == TransactionType.ADD_VALIDATOR) {\\n            totalValidators++;\\n            validators[account] = true;\\n        } else if (txnType == TransactionType.REMOVE_VALIDATOR) {\\n            totalValidators--;\\n            validators[account] = false;\\n        } else if (txnType == TransactionType.WITHDRAW) {\\n            require(\\n                address(token) == address(EPIC) ||\\n                address(token) == address(USDC),\\n                \\\"token not supported\\\"\\n            );\\n            token.transfer(account, amount);\\n        }\\n\\n        emit TransactionProcessed(account, nonce, txnType, amount, token);\\n    }\\n\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\",\"keccak256\":\"0x09450b7a0b126ff095a9f8ae6947cba0d38fdb9bf82f31d7cf98282d76ebc6d6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061256e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063be81869311610097578063f2fde38b11610066578063f2fde38b14610264578063f45346dc14610280578063fa52c7d81461029c578063fa540801146102cc576100f5565b8063be818693146101de578063c0c53b8b146101fa578063c5f6341a14610216578063c81b356b14610246576100f5565b80638da5cb5b116100d35780638da5cb5b1461014057806397aba7f91461015e5780639852099c1461018e578063a7bb5803146101ac576100f5565b8063715018a6146100fa5780638467db1c1461010457806389a3027114610122575b600080fd5b6101026102fc565b005b61010c610310565b60405161011991906113ae565b60405180910390f35b61012a610336565b60405161013791906113ae565b60405180910390f35b61014861035c565b60405161015591906113ea565b60405180910390f35b61017860048036038101906101739190611595565b610386565b60405161018591906113ea565b60405180910390f35b6101966103f5565b6040516101a3919061160a565b60405180910390f35b6101c660048036038101906101c19190611625565b6103fb565b6040516101d593929190611699565b60405180910390f35b6101f860048036038101906101f39190611871565b610463565b005b610214600480360381019061020f919061191a565b610bd0565b005b610230600480360381019061022b919061196d565b610e07565b60405161023d91906119e8565b60405180910390f35b61024e610e4c565b60405161025b9190611a03565b60405180910390f35b61027e60048036038101906102799190611a1e565b610e5f565b005b61029a60048036038101906102959190611a4b565b610ee2565b005b6102b660048036038101906102b19190611a1e565b6110a9565b6040516102c39190611ab9565b60405180910390f35b6102e660048036038101906102e19190611ad4565b6110c9565b6040516102f391906119e8565b60405180910390f35b6103046110f9565b61030e6000611177565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080610395856103fb565b925092509250600186828585604051600081526020016040526040516103be9493929190611b01565b6020604051602081039080840390855afa1580156103e0573d6000803e3d6000fd5b50505060206040510351935050505092915050565b606b5481565b60008060006041845114610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90611ba3565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b60016002606860009054906101000a900460ff166104819190611c21565b61048b9190611c52565b60ff16815110156104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c890611cf9565b60405180910390fd5b60001515606760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff16151514610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611d65565b60405180910390fd5b600080600090505b825181101561079a5760006105958989898989610e07565b905060006105a2826110c9565b905060006105ca828786815181106105bd576105bc611d85565b5b6020026020010151610386565b905060001515606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156106ca575060011515606960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156107845784806106da90611db4565b9550506001606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b505050808061079290611db4565b91505061057d565b5060016002606860009054906101000a900460ff166107b99190611c21565b6107c39190611c52565b60ff16811015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90611e48565b60405180910390fd5b6001606760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600281111561088557610884611e68565b5b85600281111561089857610897611e68565b5b03610932576068600081819054906101000a900460ff16809291906108bc90611e97565b91906101000a81548160ff021916908360ff160217905550506001606960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b88565b6001600281111561094657610945611e68565b5b85600281111561095957610958611e68565b5b036109f3576068600081819054906101000a900460ff168092919061097d90611ec0565b91906101000a81548160ff021916908360ff160217905550506000606960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b87565b600280811115610a0657610a05611e68565b5b856002811115610a1957610a18611e68565b5b03610b8657606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610ac75750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90611f35565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88866040518363ffffffff1660e01b8152600401610b41929190611f55565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611faa565b505b5b5b7fa507051db245ec8a7ad0e74e344f2dfdf01e399736a5cbbaccdddf54c680c52b8787878787604051610bbf95949392919061201f565b60405180910390a150505050505050565b60008060019054906101000a900460ff16159050808015610c015750600160008054906101000a900460ff1660ff16105b80610c2e5750610c103061123d565b158015610c2d5750600160008054906101000a900460ff1660ff16145b5b610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c64906120e4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610caa576001600060016101000a81548160ff0219169083151502179055505b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606860006101000a81548160ff021916908360ff1602179055506001606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610da8611260565b8015610e015760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610df8919061213f565b60405180910390a15b50505050565b60008585858585610e166112b9565b604051602001610e2b96959493929190612210565b60405160208183030381529060405280519060200120905095945050505050565b606860009054906101000a900460ff1681565b610e676110f9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd906122f2565b60405180910390fd5b610edf81611177565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610f8b5750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b610fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc190611f35565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161100793929190612312565b6020604051808303816000875af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611faa565b507fbff4812e409bb3904216e9fa161d3a7760e4baeac7c1f7d0aff44114fc1e1bbd83338484606b54604051611084959493929190612349565b60405180910390a1606b600081548092919061109f90611db4565b9190505550505050565b60696020528060005260406000206000915054906101000a900460ff1681565b6000816040516020016110dc9190612414565b604051602081830303815290604052805190602001209050919050565b6111016112c6565b73ffffffffffffffffffffffffffffffffffffffff1661111f61035c565b73ffffffffffffffffffffffffffffffffffffffff1614611175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116c90612486565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612518565b60405180910390fd5b6112b76112ce565b565b6000804690508091505090565b600033905090565b600060019054906101000a900460ff1661131d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131490612518565b60405180910390fd5b61132d6113286112c6565b611177565b565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061137461136f61136a8461132f565b61134f565b61132f565b9050919050565b600061138682611359565b9050919050565b60006113988261137b565b9050919050565b6113a88161138d565b82525050565b60006020820190506113c3600083018461139f565b92915050565b60006113d48261132f565b9050919050565b6113e4816113c9565b82525050565b60006020820190506113ff60008301846113db565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61142c81611419565b811461143757600080fd5b50565b60008135905061144981611423565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114a282611459565b810181811067ffffffffffffffff821117156114c1576114c061146a565b5b80604052505050565b60006114d4611405565b90506114e08282611499565b919050565b600067ffffffffffffffff821115611500576114ff61146a565b5b61150982611459565b9050602081019050919050565b82818337600083830152505050565b6000611538611533846114e5565b6114ca565b90508281526020810184848401111561155457611553611454565b5b61155f848285611516565b509392505050565b600082601f83011261157c5761157b61144f565b5b813561158c848260208601611525565b91505092915050565b600080604083850312156115ac576115ab61140f565b5b60006115ba8582860161143a565b925050602083013567ffffffffffffffff8111156115db576115da611414565b5b6115e785828601611567565b9150509250929050565b6000819050919050565b611604816115f1565b82525050565b600060208201905061161f60008301846115fb565b92915050565b60006020828403121561163b5761163a61140f565b5b600082013567ffffffffffffffff81111561165957611658611414565b5b61166584828501611567565b91505092915050565b61167781611419565b82525050565b600060ff82169050919050565b6116938161167d565b82525050565b60006060820190506116ae600083018661166e565b6116bb602083018561166e565b6116c8604083018461168a565b949350505050565b6116d9816113c9565b81146116e457600080fd5b50565b6000813590506116f6816116d0565b92915050565b611705816115f1565b811461171057600080fd5b50565b600081359050611722816116fc565b92915050565b6003811061173557600080fd5b50565b60008135905061174781611728565b92915050565b6000611758826113c9565b9050919050565b6117688161174d565b811461177357600080fd5b50565b6000813590506117858161175f565b92915050565b600067ffffffffffffffff8211156117a6576117a561146a565b5b602082029050602081019050919050565b600080fd5b60006117cf6117ca8461178b565b6114ca565b905080838252602082019050602084028301858111156117f2576117f16117b7565b5b835b8181101561183957803567ffffffffffffffff8111156118175761181661144f565b5b8086016118248982611567565b855260208501945050506020810190506117f4565b5050509392505050565b600082601f8301126118585761185761144f565b5b81356118688482602086016117bc565b91505092915050565b60008060008060008060c0878903121561188e5761188d61140f565b5b600061189c89828a016116e7565b96505060206118ad89828a01611713565b95505060406118be89828a01611738565b94505060606118cf89828a01611713565b93505060806118e089828a01611776565b92505060a087013567ffffffffffffffff81111561190157611900611414565b5b61190d89828a01611843565b9150509295509295509295565b6000806000606084860312156119335761193261140f565b5b600061194186828701611776565b935050602061195286828701611776565b9250506040611963868287016116e7565b9150509250925092565b600080600080600060a086880312156119895761198861140f565b5b6000611997888289016116e7565b95505060206119a888828901611713565b94505060406119b988828901611738565b93505060606119ca88828901611713565b92505060806119db88828901611776565b9150509295509295909350565b60006020820190506119fd600083018461166e565b92915050565b6000602082019050611a18600083018461168a565b92915050565b600060208284031215611a3457611a3361140f565b5b6000611a42848285016116e7565b91505092915050565b600080600060608486031215611a6457611a6361140f565b5b6000611a7286828701611776565b9350506020611a8386828701611713565b9250506040611a94868287016116e7565b9150509250925092565b60008115159050919050565b611ab381611a9e565b82525050565b6000602082019050611ace6000830184611aaa565b92915050565b600060208284031215611aea57611ae961140f565b5b6000611af88482850161143a565b91505092915050565b6000608082019050611b16600083018761166e565b611b23602083018661168a565b611b30604083018561166e565b611b3d606083018461166e565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000611b8d601883611b46565b9150611b9882611b57565b602082019050919050565b60006020820190508181036000830152611bbc81611b80565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c2c8261167d565b9150611c378361167d565b925082611c4757611c46611bc3565b5b828204905092915050565b6000611c5d8261167d565b9150611c688361167d565b9250828201905060ff811115611c8157611c80611bf2565b5b92915050565b7f6d6f7265207468616e2068616c66206f662076616c696461746f7273206e656560008201527f6420746f207369676e0000000000000000000000000000000000000000000000602082015250565b6000611ce3602983611b46565b9150611cee82611c87565b604082019050919050565b60006020820190508181036000830152611d1281611cd6565b9050919050565b7f696e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b6000611d4f600d83611b46565b9150611d5a82611d19565b602082019050919050565b60006020820190508181036000830152611d7e81611d42565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611dbf826115f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611df157611df0611bf2565b5b600182019050919050565b7f696e73756666696369656e742076616c696461746f7273207369676e65640000600082015250565b6000611e32601e83611b46565b9150611e3d82611dfc565b602082019050919050565b60006020820190508181036000830152611e6181611e25565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611ea28261167d565b915060ff8203611eb557611eb4611bf2565b5b600182019050919050565b6000611ecb8261167d565b915060008203611ede57611edd611bf2565b5b600182039050919050565b7f746f6b656e206e6f7420737570706f7274656400000000000000000000000000600082015250565b6000611f1f601383611b46565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b9050919050565b6000604082019050611f6a60008301856113db565b611f7760208301846115fb565b9392505050565b611f8781611a9e565b8114611f9257600080fd5b50565b600081519050611fa481611f7e565b92915050565b600060208284031215611fc057611fbf61140f565b5b6000611fce84828501611f95565b91505092915050565b60038110611fe857611fe7611e68565b5b50565b6000819050611ff982611fd7565b919050565b600061200982611feb565b9050919050565b61201981611ffe565b82525050565b600060a08201905061203460008301886113db565b61204160208301876115fb565b61204e6040830186612010565b61205b60608301856115fb565b612068608083018461139f565b9695505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006120ce602e83611b46565b91506120d982612072565b604082019050919050565b600060208201905081810360008301526120fd816120c1565b9050919050565b6000819050919050565b600061212961212461211f84612104565b61134f565b61167d565b9050919050565b6121398161210e565b82525050565b60006020820190506121546000830184612130565b92915050565b60008160601b9050919050565b60006121728261215a565b9050919050565b600061218482612167565b9050919050565b61219c612197826113c9565b612179565b82525050565b6000819050919050565b6121bd6121b8826115f1565b6121a2565b82525050565b60008160f81b9050919050565b60006121db826121c3565b9050919050565b6121f36121ee82611ffe565b6121d0565b82525050565b61220a6122058261138d565b612179565b82525050565b600061221c828961218b565b60148201915061222c82886121ac565b60208201915061223c82876121e2565b60018201915061224c82866121ac565b60208201915061225c82856121f9565b60148201915061226c82846121ac565b602082019150819050979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122dc602683611b46565b91506122e782612280565b604082019050919050565b6000602082019050818103600083015261230b816122cf565b9050919050565b600060608201905061232760008301866113db565b61233460208301856113db565b61234160408301846115fb565b949350505050565b600060a08201905061235e600083018861139f565b61236b60208301876113db565b61237860408301866115fb565b61238560608301856113db565b61239260808301846115fb565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006123dd601c8361239c565b91506123e8826123a7565b601c82019050919050565b6000819050919050565b61240e61240982611419565b6123f3565b82525050565b600061241f826123d0565b915061242b82846123fd565b60208201915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612470602083611b46565b915061247b8261243a565b602082019050919050565b6000602082019050818103600083015261249f81612463565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612502602b83611b46565b915061250d826124a6565b604082019050919050565b60006020820190508181036000830152612531816124f5565b905091905056fea2646970667358221220cdc8921f58c51d122f6890aba9325214b8332b5d09d2acb090f8afd46fed697e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063be81869311610097578063f2fde38b11610066578063f2fde38b14610264578063f45346dc14610280578063fa52c7d81461029c578063fa540801146102cc576100f5565b8063be818693146101de578063c0c53b8b146101fa578063c5f6341a14610216578063c81b356b14610246576100f5565b80638da5cb5b116100d35780638da5cb5b1461014057806397aba7f91461015e5780639852099c1461018e578063a7bb5803146101ac576100f5565b8063715018a6146100fa5780638467db1c1461010457806389a3027114610122575b600080fd5b6101026102fc565b005b61010c610310565b60405161011991906113ae565b60405180910390f35b61012a610336565b60405161013791906113ae565b60405180910390f35b61014861035c565b60405161015591906113ea565b60405180910390f35b61017860048036038101906101739190611595565b610386565b60405161018591906113ea565b60405180910390f35b6101966103f5565b6040516101a3919061160a565b60405180910390f35b6101c660048036038101906101c19190611625565b6103fb565b6040516101d593929190611699565b60405180910390f35b6101f860048036038101906101f39190611871565b610463565b005b610214600480360381019061020f919061191a565b610bd0565b005b610230600480360381019061022b919061196d565b610e07565b60405161023d91906119e8565b60405180910390f35b61024e610e4c565b60405161025b9190611a03565b60405180910390f35b61027e60048036038101906102799190611a1e565b610e5f565b005b61029a60048036038101906102959190611a4b565b610ee2565b005b6102b660048036038101906102b19190611a1e565b6110a9565b6040516102c39190611ab9565b60405180910390f35b6102e660048036038101906102e19190611ad4565b6110c9565b6040516102f391906119e8565b60405180910390f35b6103046110f9565b61030e6000611177565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080610395856103fb565b925092509250600186828585604051600081526020016040526040516103be9493929190611b01565b6020604051602081039080840390855afa1580156103e0573d6000803e3d6000fd5b50505060206040510351935050505092915050565b606b5481565b60008060006041845114610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90611ba3565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b60016002606860009054906101000a900460ff166104819190611c21565b61048b9190611c52565b60ff16815110156104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c890611cf9565b60405180910390fd5b60001515606760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900460ff16151514610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611d65565b60405180910390fd5b600080600090505b825181101561079a5760006105958989898989610e07565b905060006105a2826110c9565b905060006105ca828786815181106105bd576105bc611d85565b5b6020026020010151610386565b905060001515606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156106ca575060011515606960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156107845784806106da90611db4565b9550506001606a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b505050808061079290611db4565b91505061057d565b5060016002606860009054906101000a900460ff166107b99190611c21565b6107c39190611c52565b60ff16811015610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90611e48565b60405180910390fd5b6001606760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600281111561088557610884611e68565b5b85600281111561089857610897611e68565b5b03610932576068600081819054906101000a900460ff16809291906108bc90611e97565b91906101000a81548160ff021916908360ff160217905550506001606960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b88565b6001600281111561094657610945611e68565b5b85600281111561095957610958611e68565b5b036109f3576068600081819054906101000a900460ff168092919061097d90611ec0565b91906101000a81548160ff021916908360ff160217905550506000606960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b87565b600280811115610a0657610a05611e68565b5b856002811115610a1957610a18611e68565b5b03610b8657606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610ac75750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90611f35565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88866040518363ffffffff1660e01b8152600401610b41929190611f55565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611faa565b505b5b5b7fa507051db245ec8a7ad0e74e344f2dfdf01e399736a5cbbaccdddf54c680c52b8787878787604051610bbf95949392919061201f565b60405180910390a150505050505050565b60008060019054906101000a900460ff16159050808015610c015750600160008054906101000a900460ff1660ff16105b80610c2e5750610c103061123d565b158015610c2d5750600160008054906101000a900460ff1660ff16145b5b610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c64906120e4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610caa576001600060016101000a81548160ff0219169083151502179055505b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606860006101000a81548160ff021916908360ff1602179055506001606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610da8611260565b8015610e015760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610df8919061213f565b60405180910390a15b50505050565b60008585858585610e166112b9565b604051602001610e2b96959493929190612210565b60405160208183030381529060405280519060200120905095945050505050565b606860009054906101000a900460ff1681565b610e676110f9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd906122f2565b60405180910390fd5b610edf81611177565b50565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610f8b5750606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b610fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc190611f35565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161100793929190612312565b6020604051808303816000875af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611faa565b507fbff4812e409bb3904216e9fa161d3a7760e4baeac7c1f7d0aff44114fc1e1bbd83338484606b54604051611084959493929190612349565b60405180910390a1606b600081548092919061109f90611db4565b9190505550505050565b60696020528060005260406000206000915054906101000a900460ff1681565b6000816040516020016110dc9190612414565b604051602081830303815290604052805190602001209050919050565b6111016112c6565b73ffffffffffffffffffffffffffffffffffffffff1661111f61035c565b73ffffffffffffffffffffffffffffffffffffffff1614611175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116c90612486565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612518565b60405180910390fd5b6112b76112ce565b565b6000804690508091505090565b600033905090565b600060019054906101000a900460ff1661131d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131490612518565b60405180910390fd5b61132d6113286112c6565b611177565b565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061137461136f61136a8461132f565b61134f565b61132f565b9050919050565b600061138682611359565b9050919050565b60006113988261137b565b9050919050565b6113a88161138d565b82525050565b60006020820190506113c3600083018461139f565b92915050565b60006113d48261132f565b9050919050565b6113e4816113c9565b82525050565b60006020820190506113ff60008301846113db565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61142c81611419565b811461143757600080fd5b50565b60008135905061144981611423565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114a282611459565b810181811067ffffffffffffffff821117156114c1576114c061146a565b5b80604052505050565b60006114d4611405565b90506114e08282611499565b919050565b600067ffffffffffffffff821115611500576114ff61146a565b5b61150982611459565b9050602081019050919050565b82818337600083830152505050565b6000611538611533846114e5565b6114ca565b90508281526020810184848401111561155457611553611454565b5b61155f848285611516565b509392505050565b600082601f83011261157c5761157b61144f565b5b813561158c848260208601611525565b91505092915050565b600080604083850312156115ac576115ab61140f565b5b60006115ba8582860161143a565b925050602083013567ffffffffffffffff8111156115db576115da611414565b5b6115e785828601611567565b9150509250929050565b6000819050919050565b611604816115f1565b82525050565b600060208201905061161f60008301846115fb565b92915050565b60006020828403121561163b5761163a61140f565b5b600082013567ffffffffffffffff81111561165957611658611414565b5b61166584828501611567565b91505092915050565b61167781611419565b82525050565b600060ff82169050919050565b6116938161167d565b82525050565b60006060820190506116ae600083018661166e565b6116bb602083018561166e565b6116c8604083018461168a565b949350505050565b6116d9816113c9565b81146116e457600080fd5b50565b6000813590506116f6816116d0565b92915050565b611705816115f1565b811461171057600080fd5b50565b600081359050611722816116fc565b92915050565b6003811061173557600080fd5b50565b60008135905061174781611728565b92915050565b6000611758826113c9565b9050919050565b6117688161174d565b811461177357600080fd5b50565b6000813590506117858161175f565b92915050565b600067ffffffffffffffff8211156117a6576117a561146a565b5b602082029050602081019050919050565b600080fd5b60006117cf6117ca8461178b565b6114ca565b905080838252602082019050602084028301858111156117f2576117f16117b7565b5b835b8181101561183957803567ffffffffffffffff8111156118175761181661144f565b5b8086016118248982611567565b855260208501945050506020810190506117f4565b5050509392505050565b600082601f8301126118585761185761144f565b5b81356118688482602086016117bc565b91505092915050565b60008060008060008060c0878903121561188e5761188d61140f565b5b600061189c89828a016116e7565b96505060206118ad89828a01611713565b95505060406118be89828a01611738565b94505060606118cf89828a01611713565b93505060806118e089828a01611776565b92505060a087013567ffffffffffffffff81111561190157611900611414565b5b61190d89828a01611843565b9150509295509295509295565b6000806000606084860312156119335761193261140f565b5b600061194186828701611776565b935050602061195286828701611776565b9250506040611963868287016116e7565b9150509250925092565b600080600080600060a086880312156119895761198861140f565b5b6000611997888289016116e7565b95505060206119a888828901611713565b94505060406119b988828901611738565b93505060606119ca88828901611713565b92505060806119db88828901611776565b9150509295509295909350565b60006020820190506119fd600083018461166e565b92915050565b6000602082019050611a18600083018461168a565b92915050565b600060208284031215611a3457611a3361140f565b5b6000611a42848285016116e7565b91505092915050565b600080600060608486031215611a6457611a6361140f565b5b6000611a7286828701611776565b9350506020611a8386828701611713565b9250506040611a94868287016116e7565b9150509250925092565b60008115159050919050565b611ab381611a9e565b82525050565b6000602082019050611ace6000830184611aaa565b92915050565b600060208284031215611aea57611ae961140f565b5b6000611af88482850161143a565b91505092915050565b6000608082019050611b16600083018761166e565b611b23602083018661168a565b611b30604083018561166e565b611b3d606083018461166e565b95945050505050565b600082825260208201905092915050565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b6000611b8d601883611b46565b9150611b9882611b57565b602082019050919050565b60006020820190508181036000830152611bbc81611b80565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c2c8261167d565b9150611c378361167d565b925082611c4757611c46611bc3565b5b828204905092915050565b6000611c5d8261167d565b9150611c688361167d565b9250828201905060ff811115611c8157611c80611bf2565b5b92915050565b7f6d6f7265207468616e2068616c66206f662076616c696461746f7273206e656560008201527f6420746f207369676e0000000000000000000000000000000000000000000000602082015250565b6000611ce3602983611b46565b9150611cee82611c87565b604082019050919050565b60006020820190508181036000830152611d1281611cd6565b9050919050565b7f696e76616c6964206e6f6e636500000000000000000000000000000000000000600082015250565b6000611d4f600d83611b46565b9150611d5a82611d19565b602082019050919050565b60006020820190508181036000830152611d7e81611d42565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611dbf826115f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611df157611df0611bf2565b5b600182019050919050565b7f696e73756666696369656e742076616c696461746f7273207369676e65640000600082015250565b6000611e32601e83611b46565b9150611e3d82611dfc565b602082019050919050565b60006020820190508181036000830152611e6181611e25565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611ea28261167d565b915060ff8203611eb557611eb4611bf2565b5b600182019050919050565b6000611ecb8261167d565b915060008203611ede57611edd611bf2565b5b600182039050919050565b7f746f6b656e206e6f7420737570706f7274656400000000000000000000000000600082015250565b6000611f1f601383611b46565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b9050919050565b6000604082019050611f6a60008301856113db565b611f7760208301846115fb565b9392505050565b611f8781611a9e565b8114611f9257600080fd5b50565b600081519050611fa481611f7e565b92915050565b600060208284031215611fc057611fbf61140f565b5b6000611fce84828501611f95565b91505092915050565b60038110611fe857611fe7611e68565b5b50565b6000819050611ff982611fd7565b919050565b600061200982611feb565b9050919050565b61201981611ffe565b82525050565b600060a08201905061203460008301886113db565b61204160208301876115fb565b61204e6040830186612010565b61205b60608301856115fb565b612068608083018461139f565b9695505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006120ce602e83611b46565b91506120d982612072565b604082019050919050565b600060208201905081810360008301526120fd816120c1565b9050919050565b6000819050919050565b600061212961212461211f84612104565b61134f565b61167d565b9050919050565b6121398161210e565b82525050565b60006020820190506121546000830184612130565b92915050565b60008160601b9050919050565b60006121728261215a565b9050919050565b600061218482612167565b9050919050565b61219c612197826113c9565b612179565b82525050565b6000819050919050565b6121bd6121b8826115f1565b6121a2565b82525050565b60008160f81b9050919050565b60006121db826121c3565b9050919050565b6121f36121ee82611ffe565b6121d0565b82525050565b61220a6122058261138d565b612179565b82525050565b600061221c828961218b565b60148201915061222c82886121ac565b60208201915061223c82876121e2565b60018201915061224c82866121ac565b60208201915061225c82856121f9565b60148201915061226c82846121ac565b602082019150819050979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122dc602683611b46565b91506122e782612280565b604082019050919050565b6000602082019050818103600083015261230b816122cf565b9050919050565b600060608201905061232760008301866113db565b61233460208301856113db565b61234160408301846115fb565b949350505050565b600060a08201905061235e600083018861139f565b61236b60208301876113db565b61237860408301866115fb565b61238560608301856113db565b61239260808301846115fb565b9695505050505050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006123dd601c8361239c565b91506123e8826123a7565b601c82019050919050565b6000819050919050565b61240e61240982611419565b6123f3565b82525050565b600061241f826123d0565b915061242b82846123fd565b60208201915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612470602083611b46565b915061247b8261243a565b602082019050919050565b6000602082019050818103600083015261249f81612463565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612502602b83611b46565b915061250d826124a6565b604082019050919050565b60006020820190508181036000830152612531816124f5565b905091905056fea2646970667358221220cdc8921f58c51d122f6890aba9325214b8332b5d09d2acb090f8afd46fed697e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositId()": {
        "notice": "unique ID assigned to each deposit"
      },
      "totalValidators()": {
        "notice": "This variable store the total validators in the sidechain"
      },
      "validators(address)": {
        "notice": "This mapping tells us if an sidechain account is a validator or not"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 713,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "EPIC",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20)704"
      },
      {
        "astId": 716,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "USDC",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20)704"
      },
      {
        "astId": 723,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "isNonceProcessed",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 726,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "totalValidators",
        "offset": 0,
        "slot": "104",
        "type": "t_uint8"
      },
      {
        "astId": 731,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "validators",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 740,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "validatorSigned",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 743,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "depositId",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)704": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}